import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:PatientMonitor/authentication/register.dart';

import '../global/global.dart';
import '../screens/home_screen.dart';
import '../widgets/custom_text_field.dart';
import '../widgets/error_dialog.dart';
import '../widgets/loading_dialog.dart';


class LoginScreen extends StatefulWidget {
  const LoginScreen({Key? key}) : super(key: key);

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final GlobalKey<FormState> _formKey =GlobalKey<FormState>();
  TextEditingController emailController = TextEditingController();
  TextEditingController passwordController = TextEditingController();

  formValidation(){
    if(emailController.text.isNotEmpty && passwordController.text.isNotEmpty){
      //login
loginNow();
    }
    else{
      showDialog(
          context: context,
          builder: (c){
            return ErrorDialog(
              message: "please write email/password.",
            );
          }
          );

    }
  }

  loginNow()async{
    showDialog(
        context: context,
        builder: (c)
        {
          return LoadingDialog(
            message: "Checking Credential",
          );
        }
        );
    User? currentUser;
    await firebaseAuth.signInWithEmailAndPassword(
        email: emailController.text.trim(),
        password: passwordController.text.trim()
    ).then((auth) {
    currentUser = auth.user!;
    }).catchError((error){
      Navigator.pop(context);
      showDialog(
          context: context,
          builder: (c){
            return ErrorDialog(
              message: error.message.toString(),
            );
          }
      );
    });
    if(currentUser != null){
readDataAndSetDataLocally(currentUser!);
    }
  }

  Future readDataAndSetDataLocally(User currentUser)async
  {
    await FirebaseFirestore.instance
        .collection("Doctors")
        .doc(currentUser.uid)
        .get().then((snapshot)async {
          if(snapshot.exists){
            await sharedPreferences!.setString("uid", currentUser.uid);
            await sharedPreferences!.setString("email", snapshot.data()!["DoctorEmail"]);
            await sharedPreferences!.setString("name", snapshot.data()!["DoctorName"]);
            await sharedPreferences!.setString("photoUrl", snapshot.data()!["DoctorAvatarUrl"]);
            Navigator.pop(context);
            Navigator.pushReplacement(context, MaterialPageRoute(builder: (c)=>const HomeScreen()));
          }
          else
            {
              firebaseAuth.signOut();
              Navigator.pop(context);
             // Navigator.push(context, MaterialPageRoute(builder: (c)=>const AuthScreen()));
              showDialog(
                  context: context,
                  builder: (c){
                    return ErrorDialog(
                      message: "No Record Found",
                    );
                  }
              );
            }

    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(

      body: Container(
        decoration:const BoxDecoration(
            gradient:  LinearGradient(
              colors: [
                Colors.cyanAccent,
                Colors.blueAccent,

              ],
              begin: FractionalOffset(0.0, 0.0),
              end: FractionalOffset(1.0, 0.0),
              stops: [0.0,1.0],
              tileMode: TileMode.clamp,
            )
        ) ,
        child: SingleChildScrollView(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              SizedBox(height: MediaQuery.of(context).size.height *0.010,),
              Image.asset("images/doctor.png",
                height: MediaQuery.of(context).size.height * 0.45,
                width:MediaQuery.of(context).size.height * 0.45 ,
              ),
              Container(

                height: MediaQuery.of(context).size.height *0.60,
                width: MediaQuery.of(context).size.width,
                decoration: BoxDecoration(
                  color: Colors.grey[200],
                  borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(90),
                      topRight: Radius.circular(90),

                  ),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey.withOpacity(0.5),
                      spreadRadius: 5,
                      blurRadius: 7,
                      offset: Offset(0, 3), // changes position of shadow
                    ),
                  ],
                ),

                child: SingleChildScrollView(
                  child: Column(
                    mainAxisSize: MainAxisSize.max,
                    children: [
                      SizedBox(height: 20,),
                   Text("Login",
                     style:
                   TextStyle(
                       fontSize: 25,
                       fontWeight: FontWeight.bold),),
                      SizedBox(height: 20,),
                      Form(key: _formKey,
                      child: Column(
                        children: [
                          CustomTextField(
                            data: Icons.email,
                            controller: emailController,
                            hintText: "Email" ,
                            isObsecure: false,
                          ),
                          CustomTextField(
                            data: Icons.lock,
                            controller: passwordController,
                            hintText: "Password" ,
                            isObsecure: true,
                          ),
                          SizedBox(
                            height: 5,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            children: [
                              Text("Forgot your Password?",
                              style: TextStyle(
                                fontSize: 9,
                                color: Colors.black45
                              ),),
                              SizedBox(
                                width: MediaQuery.of(context).size.width * 0.05,
                              )
                            ],
                          ),
                          SizedBox(height: 30,),
                          ElevatedButton(
                            child: const Text("Login",
                              style: TextStyle(color:Colors.white ,fontWeight: FontWeight.bold),
                            ),
                            style: ElevatedButton.styleFrom(
                                primary: Colors.lightBlueAccent,
                                padding: const EdgeInsets.symmetric(horizontal: 40,vertical: 15),
                                shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(15)
                                )

                            ),
                            onPressed:(){
                              formValidation();
                            },
                          ),
                          SizedBox(height: 30,),
                          GestureDetector(
                            onTap: (){
                             Navigator.pushReplacement(context, MaterialPageRoute(builder: (c)=>RegisterScreen()));
                            },
                            child: RichText(
                              text: const TextSpan(
                                text: 'Dont Have An Account? ',
                                style: TextStyle(fontSize: 13,color:Colors.grey ),
                                children: <TextSpan>[
                                  TextSpan(
                                      text: ' Sign Up',
                                      style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                          color: Colors.black54
                                      )),
                                ],
                              ),
                            ),
                          ),
                        ],
                      ),
                      )
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
