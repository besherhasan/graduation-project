
import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:geocoding/geocoding.dart';
import 'package:geolocator/geolocator.dart';
import 'package:PatientMonitor/authentication/login.dart';
import 'package:image_picker/image_picker.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:firebase_storage/firebase_storage.dart' as fStorage;
import '../global/global.dart';
import '../screens/home_screen.dart';
import '../widgets/custom_text_field.dart';
import '../widgets/error_dialog.dart';
import '../widgets/loading_dialog.dart';

class RegisterScreen extends StatefulWidget {
  const RegisterScreen({Key? key}) : super(key: key);

  @override
  State<RegisterScreen> createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final GlobalKey<FormState> _formKey =GlobalKey<FormState>();
  TextEditingController nameController = TextEditingController();
  TextEditingController emailController = TextEditingController();
  TextEditingController passwordController = TextEditingController();
  TextEditingController confirmPasswordController = TextEditingController();
  TextEditingController phoneController = TextEditingController();

  XFile? imageXFile;
  final ImagePicker _picker =ImagePicker();


  String DoctorImageUrl = "";



  Future<void>  _getImage() async{
    imageXFile = await _picker.pickImage(source: ImageSource.gallery);

    setState(() {
      imageXFile;
    });
  }


Future<void> formValidation() async{

    if(imageXFile == null){
      showDialog(
          context: context,
          builder: (c){
return ErrorDialog(
  message: "Please select an image",
);
          }
          );
    }
    else{
      if(passwordController.text == confirmPasswordController.text){

       if(confirmPasswordController.text.isNotEmpty && emailController.text.isNotEmpty && nameController.text.isNotEmpty && phoneController.text.isNotEmpty )
       {
         //start upload imag
         showDialog(
             context: context,
             builder: (c){
               return LoadingDialog(
                 message: "Registering Account ",
               );
             }
             );
         String fileName = DateTime.now().millisecondsSinceEpoch.toString();
         fStorage.Reference reference = fStorage.FirebaseStorage.instance.ref().child("Doctors").child(fileName);
         fStorage.UploadTask uploadTask = reference.putFile(File(imageXFile!.path));
         fStorage.TaskSnapshot taskSnapshot = await uploadTask.whenComplete((){});
         await taskSnapshot.ref.getDownloadURL().then((url){
           DoctorImageUrl = url;


           //save information to firestore
           authernticateSellerAndSignUp();
         });

       }
       else{
         showDialog(
             context: context,
             builder: (c){
               return ErrorDialog(
                 message: "Please write the required info for Registration",
               );
             }
         );
       }
      }else{
        showDialog(
            context: context,
            builder: (c){
              return ErrorDialog(
                message: "Password do not match each other",
              );
            }
        );
      }
    }
}
void authernticateSellerAndSignUp()async
{
User? currentUser;
await firebaseAuth.createUserWithEmailAndPassword(
    email: emailController.text.trim(),
    password: passwordController.text.trim(),).then((auth) {
     currentUser = auth.user;
}).catchError((error){
  Navigator.pop(context);
  showDialog(
      context: context,
      builder: (c){
        return ErrorDialog(
          message: error.message.toString(),
        );
      }
  );
});

if (currentUser != null){
  saveDataToFirestore(currentUser!).then((value){
    Navigator.pop(context);
    //send user to home page
    Route newRoute =MaterialPageRoute(builder: (c)=> HomeScreen());
    Navigator.pushReplacement(context, newRoute);
  });
}

}
Future saveDataToFirestore(User currentUser) async
{
  FirebaseFirestore.instance.collection("Doctors").doc(currentUser.uid).set({
    "DoctorUID" : currentUser.uid,
    "DoctorEmail": currentUser.email,
    "DoctorName": nameController.text.trim(),
    "DoctorAvatarUrl": DoctorImageUrl,
    "phone": phoneController.text.trim(),
    "status":"approved",
  });

  //save data locally
  sharedPreferences = await SharedPreferences.getInstance();
  await sharedPreferences!.setString("uid", currentUser.uid);
  await sharedPreferences!.setString("email", currentUser.email.toString());
  await sharedPreferences!.setString("name", nameController.text.trim());
  await sharedPreferences!.setString("photoUrl", DoctorImageUrl);
   
}


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration:const BoxDecoration(
            gradient:  LinearGradient(
              colors: [
                Colors.cyanAccent,
                Colors.blueAccent,

              ],
              begin: FractionalOffset(0.0, 0.0),
              end: FractionalOffset(1.0, 0.0),
              stops: [0.0,1.0],
              tileMode: TileMode.clamp,
            )
        ) ,
        child: SingleChildScrollView(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              SizedBox(height: MediaQuery.of(context).size.height*0.25,),
              SingleChildScrollView(
                child: Container(
                  height: MediaQuery.of(context).size.height *0.90,
                  width: MediaQuery.of(context).size.width,
          decoration: BoxDecoration(
            color: Colors.grey[200],
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(90),
              topRight: Radius.circular(90),

            ),),

                  child: Column(
                    mainAxisSize:MainAxisSize.max ,
                    children: [
                       SizedBox(height:MediaQuery.of(context).size.height *0.020,),
                      InkWell(
                        onTap: (){
                          _getImage();
                        },
                        child: CircleAvatar(
                          radius: MediaQuery.of(context).size.width * 0.15,
                          backgroundColor: Colors.grey.withOpacity(0.3),
                          backgroundImage:imageXFile==null? null : FileImage(File(imageXFile!.path)) ,
                          child: imageXFile == null ? Icon(Icons.add_photo_alternate,size:MediaQuery.of(context).size.width * 0.20 ,
                          color: Colors.grey,
                          ) : null,
                        ),
                      ),
                       SizedBox(height:MediaQuery.of(context).size.height *0.010,),
                      Form(
                      key: _formKey,
                        child: Column(
                          children: [
                            CustomTextField(
                              data: Icons.person,
                              controller: nameController,
                              hintText: "Name" ,
                              isObsecure: false,
                            ),
                            CustomTextField(
                              data: Icons.email,
                              controller: emailController,
                              hintText: "Email" ,
                              isObsecure: false,
                            ),
                            CustomTextField(
                              data: Icons.lock,
                              controller: passwordController,
                              hintText: "Password" ,
                              isObsecure: true,
                            ),
                            CustomTextField(
                              data: Icons.lock,
                              controller: confirmPasswordController,
                              hintText: "Confirm Password" ,
                              isObsecure: true,
                            ),
                            CustomTextField(
                              data: Icons.phone,
                              controller: phoneController,
                              hintText: "Phone" ,
                              isObsecure: false,
                            ),




                          ],
                        ),
                      ),
                       SizedBox(height: MediaQuery.of(context).size.height *0.020,),
                      ElevatedButton(
                          child: const Text("Sign Up",
                          style: TextStyle(color:Colors.white ,fontWeight: FontWeight.bold),
                          ),
                        style: ElevatedButton.styleFrom(
                          primary: Colors.lightBlueAccent,
                          padding: EdgeInsets.symmetric(horizontal: 40,vertical: 15),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(15)
                          )

                        ),
                        onPressed:() {
formValidation();
                        },
                      ),
                      SizedBox(height: MediaQuery.of(context).size.height *0.020,),
                      GestureDetector(
                        onTap: (){
                          Navigator.pushReplacement(context, MaterialPageRoute(builder: (c)=>LoginScreen()));
                        },
                        child: RichText(
                          text: const TextSpan(
                            text: 'Already Have An Account? ',
                            style: TextStyle(fontSize: 13,color:Colors.grey ),
                            children: <TextSpan>[
                              TextSpan(
                                  text: ' Sign In',
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      color: Colors.black54
                                  )),
                            ],
                          ),
                        ),
                      ),
                      SizedBox(height: MediaQuery.of(context).size.height *0.010,),

                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
